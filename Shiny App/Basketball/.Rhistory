filter(type == 'fieldgoal') %>%
rename(c("T1_event_coord_x"="event_coord_x", "T1_event_coord_y"="event_coord_y"))%>%
select(event_coord_x, event_coord_y) -> team1
NEW %>%
filter(team_name == 'Blue Devils') %>%
filter(type == 'fieldgoal')
NEW %>%
filter(team_name == 'Blue Devils') %>%
filter(type == 'fieldgoal') %>%
rename(c("T1_event_coord_x"="event_coord_x", "T1_event_coord_y"="event_coord_y"))
NEW %>%
filter(team_name == 'Blue Devils') %>%
filter(type == 'fieldgoal') %>%
rename(c("T1_event_coord_x"="event_coord_x", "T1_event_coord_y"="event_coord_y"))
NEW %>%
filter(team_name == 'Fighting Irish') %>%
filter(type == 'fieldgoal') %>%
rename("T2_event_coord_x"="event_coord_x") %>%
select(event_coord_x, event_coord_y) -> team2
NEW %>%
filter(team_name == 'Fighting Irish') %>%
filter(type == 'fieldgoal') %>%
rename("T2_event_coord_x"=event_coord_x) %>%
select(event_coord_x, event_coord_y) -> team2
NEW %>%
filter(team_name == 'Fighting Irish') %>%
filter(type == 'fieldgoal') %>%
rename("T2_event_coord_x"=event_coord_x)
NEW %>%
filter(team_name == 'Fighting Irish') %>%
filter(type == 'fieldgoal') %>%
rename("T2_event_coord_x"="event_coord_x")
NEW %>%
filter(team_name == 'Fighting Irish') %>%
filter(type == 'fieldgoal') %>%
rename("T2_event_coord_x"="event_coord_x", "T2_event_coord_y"="event_coord_y")
NEW %>%
filter(team_name == 'Blue Devils') %>%
filter(type == 'fieldgoal') %>%
rename("T1_event_coord_x"="event_coord_x", "T1_event_coord_y"="event_coord_y") %>%
select(T1_event_coord_x, T2_event_coord_y) -> team1
NEW %>%
filter(team_name == 'Fighting Irish') %>%
filter(type == 'fieldgoal') %>%
rename("T2_event_coord_x"="event_coord_x", "T2_event_coord_y"="event_coord_y") %>%
select(T2_event_coord_x, T2_event_coord_y) -> team2
team1
NEW %>%
filter(team_name == 'Blue Devils') %>%
filter(type == 'fieldgoal') %>%
rename("T1_event_coord_x"="event_coord_x", "T1_event_coord_y"="event_coord_y") %>%
select(T1_event_coord_x, T2_event_coord_y) -> team1
NEW %>%
filter(team_name == 'Blue Devils') %>%
filter(type == 'fieldgoal') %>%
rename("T1_event_coord_x"="event_coord_x", "T1_event_coord_y"="event_coord_y")
NEW %>%
filter(team_name == 'Blue Devils') %>%
filter(type == 'fieldgoal') %>%
rename("T1_event_coord_x"="event_coord_x", "T1_event_coord_y"="event_coord_y") %>%
select(T1_event_coord_x, T2_event_coord_y) -> team1
NEW %>%
filter(team_name == 'Blue Devils') %>%
filter(type == 'fieldgoal') %>%
rename("T1_event_coord_x"="event_coord_x", "T1_event_coord_y"="event_coord_y") %>%
select(T1_event_coord_x, T1_event_coord_y) -> team1
team1
events = merge(team1, team2, by=0, all=T)
events
hexplot = ggplot(events, aes(T1_event_coord_x, T1_event_coord_y, T2_event_coord_x, T2_event_coord_y)) +
geom_hex(binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
hexplot = ggplot(events, aes(T1_event_coord_x, T1_event_coord_y, T2_event_coord_x, T2_event_coord_y)) +
geom_hex(binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
hexplot = ggplot(events, aes(T1_event_coord_x, T1_event_coord_y, T2_event_coord_x, T2_event_coord_y)) +
geom_hex(binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
hexplot = ggplot(events) +
geom_hex(aes(T1_event_coord_x, T1_event_coord_y, T2_event_coord_x, T2_event_coord_y), binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
hexplot = ggplot(events) +
geom_hex(aes(x=T1_event_coord_x, y=T1_event_coord_y, x2=T2_event_coord_x, yx=T2_event_coord_y), binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
hexplot = ggplot(events) +
geom_hex(aes(x=T1_event_coord_x, y=T1_event_coord_y, x2=T2_event_coord_x, y2=T2_event_coord_y), binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
runApp()
tail(events)
hexplot = ggplot(events) +
geom_hex(aes(x=T1_event_coord_x, y=T1_event_coord_y, x2=T2_event_coord_x, y2=T2_event_coord_y), binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
hexplot = ggplot(events) +
geom_hex(aes(T1_event_coord_x, T1_event_coord_y, T2_event_coord_x, T2_event_coord_y), binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
hexplot = ggplot(events) +
geom_hex(aes(T1_event_coord_x, T1_event_coord_y, T2_event_coord_x, T2_event_coord_y), binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
hexplot = ggplot(events) +
geom_hex(aes(c(T1_event_coord_x,T2_event_coord_x), c(T1_event_coord_y, T2_event_coord_y)), binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomHex <- ggproto("GeomHex", Geom,
draw_group = function(data, panel_params, coord) {
if (!inherits(coord, "CoordCartesian")) {
stop("geom_hex() only works with Cartesian coordinates", call. = FALSE)
}
coords <- coord$transform(data, panel_params)
ggname("geom_hex", hexGrob(
coords$x, coords$y,
gp = gpar(
col = coords$colour,
fill = alpha(coords$fill, coords$alpha),
lwd = coords$size * .pt,
lty = coords$linetype
)
))
},
required_aes = c("x", "y"),
default_aes = aes(
colour = NA,
fill = "grey50",
size = 0.5,
linetype = 1,
alpha = NA
),
draw_key = draw_key_polygon
)
hexplot = ggplot(events) +
geom_hex(aes(x=T1_event_coord_x, y=T1_event_coord_y, x2=T2_event_coord_x, y2=T2_event_coord_y), binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomHex <- ggproto("GeomHex", Geom,
draw_group = function(data, panel_params, coord) {
if (!inherits(coord, "CoordCartesian")) {
stop("geom_hex() only works with Cartesian coordinates", call. = FALSE)
}
coords <- coord$transform(data, panel_params)
ggname("geom_hex", hexGrob(
coords$x, coords$y,
gp = gpar(
col = coords$colour,
fill = alpha(coords$fill, coords$alpha),
lwd = coords$size * .pt,
lty = coords$linetype
)
))
},
required_aes = c("x", "y", "x2", "y2"),
default_aes = aes(
colour = NA,
fill = "grey50",
size = 0.5,
linetype = 1,
alpha = NA
),
draw_key = draw_key_polygon
)
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomHex <- ggproto("GeomHex", Geom,
draw_group = function(data, panel_params, coord) {
if (!inherits(coord, "CoordCartesian")) {
stop("geom_hex() only works with Cartesian coordinates", call. = FALSE)
}
coords <- coord$transform(data, panel_params)
ggname("geom_hex", hexGrob(
coords$x, coords$y,
gp = gpar(
col = coords$colour,
fill = alpha(coords$fill, coords$alpha),
lwd = coords$size * .pt,
lty = coords$linetype
)
))
},
required_aes = c("x", "y", "x2", "y2"),
default_aes = aes(
colour = NA,
fill = "grey50",
size = 0.5,
linetype = 1,
alpha = NA
),
draw_key = draw_key_polygon
)
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomHex <- ggproto("GeomHex", Geom,
draw_group = function(data, panel_params, coord) {
if (!inherits(coord, "CoordCartesian")) {
stop("geom_hex() only works with Cartesian coordinates", call. = FALSE)
}
coords <- coord$transform(data, panel_params)
ggname("geom_hex", hexGrob(
coords$x, coords$y,
gp = gpar(
col = coords$colour,
fill = alpha(coords$fill, coords$alpha),
lwd = coords$size * .pt,
lty = coords$linetype
)
))
},
required_aes = c("x", "y", "x2", "y2"),
default_aes = aes(
colour = NA,
fill = "grey50",
size = 0.5,
linetype = 1,
alpha = NA
),
draw_key = draw_key_polygon
)
hexplot = ggplot(events) +
geom_hex(aes(x=T1_event_coord_x, y=T1_event_coord_y, x2=T2_event_coord_x, y2=T2_event_coord_y), binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
ggname("geom_hex", hexGrob(
coords$x[[1]], coords$y[[1]],
gp = gpar(
col = coords$colour,
fill = alpha(coords$fill, coords$alpha),
lwd = coords$size * .pt,
lty = coords$linetype
)
))
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomHex <- ggproto("GeomHex", Geom,
draw_group = function(data, panel_params, coord) {
if (!inherits(coord, "CoordCartesian")) {
stop("geom_hex() only works with Cartesian coordinates", call. = FALSE)
}
coords <- coord$transform(data, panel_params)
ggname("geom_hex", hexGrob(
coords$x[[1]], coords$y[[1]],
gp = gpar(
col = coords$colour,
fill = alpha(coords$fill, coords$alpha),
lwd = coords$size * .pt,
lty = coords$linetype
)
))
},
required_aes = c("x", "y"),
default_aes = aes(
colour = NA,
fill = "grey50",
size = 0.5,
linetype = 1,
alpha = NA
),
draw_key = draw_key_polygon
)
# Draw hexagon grob
# Modified from code by Nicholas Lewin-Koh and Martin Maechler
#
# @param x positions of hex centres
# @param y positions
# @param size vector of hex sizes
# @param gp graphical parameters
# @keyword internal
hexGrob <- function(x, y, x2, y2, size = rep(1, length(x)), gp = gpar()) {
stopifnot(length(y) == length(x))
dx <- resolution(x, FALSE)
dy <- resolution(y, FALSE) / sqrt(3) / 2 * 1.15
dx2 <- resolution(x2, FALSE)
dy2 <- resolution(y2, FALSE) / sqrt(3) / 2 * 1.15
hexC <- hexbin::hexcoords(dx-dx2, dy-dy2, n = 1)
n <- length(x)
polygonGrob(
x = rep.int(hexC$x, n) * rep(size, each = 6) + rep(x, each = 6),
y = rep.int(hexC$y, n) * rep(size, each = 6) + rep(y, each = 6),
default.units = "native",
id.lengths = rep(6, n), gp = gp
)
}
hexplot = ggplot(events) +
geom_hex(aes(c(T1_event_coord_x,T2_event_coord_x), c(T1_event_coord_y, T2_event_coord_y)), binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
print(coords$x[[1]])
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomHex <- ggproto("GeomHex", Geom,
draw_group = function(data, panel_params, coord) {
print(coords$x[[1]])
if (!inherits(coord, "CoordCartesian")) {
stop("geom_hex() only works with Cartesian coordinates", call. = FALSE)
}
coords <- coord$transform(data, panel_params)
ggname("geom_hex", hexGrob(
coords$x[[1]], coords$y[[1]],
gp = gpar(
col = coords$colour,
fill = alpha(coords$fill, coords$alpha),
lwd = coords$size * .pt,
lty = coords$linetype
)
))
},
required_aes = c("x", "y"),
default_aes = aes(
colour = NA,
fill = "grey50",
size = 0.5,
linetype = 1,
alpha = NA
),
draw_key = draw_key_polygon
)
hexplot = ggplot(events) +
geom_hex(aes(c(T1_event_coord_x,T2_event_coord_x), c(T1_event_coord_y, T2_event_coord_y)), binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
hexplot = ggplot(events) +
geom_hex(aes(c(T1_event_coord_x,T2_event_coord_x), c(T1_event_coord_y, T2_event_coord_y)), binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
hexplot = ggplot(events) +
geom_hex(aes(x=T1_event_coord_x, y=T1_event_coord_y, x2=T2_event_coord_x, y2=T2_event_coord_y), binwidth=15) +
coord_fixed() +
theme_void() +
scale_fill_distiller(palette = 'Spectral') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
runApp()
runApp()
runApp()
runApp()
runApp()
Radar_teams2 %>%
ggradar() + scale_color_brewer(palette = 'Spectral') +
theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
text = element_text(color="white"),
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
runApp()
runApp()
runApp()
