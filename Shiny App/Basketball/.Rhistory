coord_flip() +
theme_fivethirtyeight() +
scale_fill_manual(values=c("#d6c000","#56A2D8","#C6563D"),
guide = guide_legend(reverse = T)) +
theme(legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.size =  unit(0.15, "in"),
panel.grid.major.y = element_blank(),
legend.position = c(.18,1.04),
plot.background = element_blank(),
panel.background = element_blank(),
legend.background = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.text.y = element_text(color=state_winner$Winner)) +
ggtitle('\nProportion of Vote by Party by State\n') +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10),
position = 'bottom') +
labs(fill='Party:')
ECDeviation %>%
select(-c(Votes, `Party Category`)) %>%
distinct() %>%
ggplot(aes(x=State, y=Deviation, label=round(Deviation,1))) +
geom_segment(aes(y = 0,
x = State,
yend = Deviation,
xend = State),
color='black') +
geom_point(stat='identity', fill='#ff0000', size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Lollipop Chart",
subtitle="Normalized mileage from 'mtcars': Lollipop") +
# ylim(-2.5, 2.5) +
coord_flip() +
theme_fivethirtyeight() +
scale_fill_manual(values=c("#d6c000","#56A2D8","#C6563D"),
guide = guide_legend(reverse = T)) +
theme(legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.size =  unit(0.15, "in"),
panel.grid.major.y = element_blank(),
legend.position = c(.18,1.04),
plot.background = element_blank(),
panel.background = element_blank(),
legend.background = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.text.y = element_text(color=state_winner$Winner)) +
ggtitle('\nProportion of Vote by Party by State\n') +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10),
position = 'bottom') +
labs(fill='Party:')
ECDeviation %>%
select(-c(Votes, `Party Category`)) %>%
distinct() %>%
ggplot(aes(x=State, y=Deviation, label=round(Deviation,1))) +
geom_segment(aes(y = 0,
x = State,
yend = Deviation,
xend = State),
color='black') +
geom_point(stat='identity', color='#ff0000', size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Lollipop Chart",
subtitle="Normalized mileage from 'mtcars': Lollipop") +
# ylim(-2.5, 2.5) +
coord_flip() +
theme_fivethirtyeight() +
scale_fill_manual(values=c("#d6c000","#56A2D8","#C6563D"),
guide = guide_legend(reverse = T)) +
theme(legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.size =  unit(0.15, "in"),
panel.grid.major.y = element_blank(),
legend.position = c(.18,1.04),
plot.background = element_blank(),
panel.background = element_blank(),
legend.background = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.text.y = element_text(color=state_winner$Winner)) +
ggtitle('\nProportion of Vote by Party by State\n') +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10),
position = 'bottom') +
labs(fill='Party:')
ECDeviation %>%
select(-c(Votes, `Party Category`)) %>%
distinct() %>%
ggplot(aes(x=State, y=Deviation, label=round(Deviation,1))) +
geom_segment(aes(y = 0,
x = State,
yend = Deviation,
xend = State),
color='black') +
geom_point(stat='identity', color=state_winner$Winner, size=6)  +
geom_text(color="white", size=2) +
labs(title="Diverging Lollipop Chart",
subtitle="Normalized mileage from 'mtcars': Lollipop") +
# ylim(-2.5, 2.5) +
coord_flip() +
theme_fivethirtyeight() +
scale_fill_manual(values=c("#d6c000","#56A2D8","#C6563D"),
guide = guide_legend(reverse = T)) +
theme(legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.size =  unit(0.15, "in"),
panel.grid.major.y = element_blank(),
legend.position = c(.18,1.04),
plot.background = element_blank(),
panel.background = element_blank(),
legend.background = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.text.y = element_text(color=state_winner$Winner)) +
ggtitle('\nProportion of Vote by Party by State\n') +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10),
position = 'bottom') +
labs(fill='Party:')
ECDeviation %>%
select(-c(Votes, `Party Category`)) %>%
distinct() %>%
ggplot(aes(x=State, y=Deviation, label=round(Deviation,1))) +
geom_segment(aes(y = 0,
x = State,
yend = Deviation,
xend = State),
color='black') +
geom_point(stat='identity', color=state_winner$Winner, size=6)  +
geom_text(color="white", size=2) +
labs(title="US Electoral College Voting Power",
subtitle="Normalized on Median Voting Power") +
coord_flip() +
theme_fivethirtyeight() +
scale_fill_manual(values=c("#d6c000","#56A2D8","#C6563D"),
guide = guide_legend(reverse = T)) +
theme(legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.size =  unit(0.15, "in"),
panel.grid.major.y = element_blank(),
legend.position = c(.18,1.04),
plot.background = element_blank(),
panel.background = element_blank(),
legend.background = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.text.y = element_text(color=state_winner$Winner)) +
ggtitle('\nProportion of Vote by Party by State\n') +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10),
position = 'bottom') +
labs(fill='Party:')
ECDeviation %>%
select(-c(Votes, `Party Category`)) %>%
distinct() %>%
ggplot(aes(x=State, y=Deviation, label=round(Deviation,1))) +
geom_segment(aes(y = 0,
x = State,
yend = Deviation,
xend = State),
color='black') +
geom_point(stat='identity', color=state_winner$Winner, size=6)  +
geom_text(color="white", size=2) +
labs(title="US Electoral College Voting Power",
subtitle="Normalized on Median Voting Power") +
coord_flip() +
theme_fivethirtyeight() +
scale_fill_manual(values=c("#d6c000","#56A2D8","#C6563D"),
guide = guide_legend(reverse = T)) +
theme(legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.size =  unit(0.15, "in"),
panel.grid.major.y = element_blank(),
# legend.position = c(.18,1.04),
plot.background = element_blank(),
panel.background = element_blank(),
legend.background = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.text.y = element_text(color=state_winner$Winner)) +
ggtitle('\nProportion of Vote by Party by State\n') +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10),
position = 'bottom') +
labs(fill='Party:')
ECDeviation %>%
select(-c(Votes, `Party Category`)) %>%
distinct() %>%
ggplot(aes(x=State, y=Deviation, label=round(Deviation,1))) +
geom_segment(aes(y = 0,
x = State,
yend = Deviation,
xend = State),
color='black') +
geom_point(stat='identity', color=desc(state_winner$Winner), size=6)  +
geom_text(color="white", size=2) +
labs(title="US Electoral College Voting Power",
subtitle="Normalized on Median Voting Power") +
coord_flip() +
theme_fivethirtyeight() +
scale_fill_manual(values=c("#d6c000","#56A2D8","#C6563D"),
guide = guide_legend(reverse = T)) +
theme(legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.size =  unit(0.15, "in"),
panel.grid.major.y = element_blank(),
plot.background = element_blank(),
panel.background = element_blank(),
legend.background = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.text.y = element_text(color=state_winner$Winner)) +
ggtitle('\nProportion of Vote by Party by State\n') +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10),
position = 'bottom') +
labs(fill='Party:')
ECDeviation %>%
select(-c(Votes, `Party Category`)) %>%
distinct() %>%
ggplot(aes(x=State, y=Deviation, label=round(Deviation,1))) +
geom_segment(aes(y = 0,
x = State,
yend = Deviation,
xend = State),
color='black') +
geom_point(stat='identity', color=state_winner$Winner, size=6)  +
geom_text(color="white", size=2) +
labs(title="US Electoral College Voting Power",
subtitle="Normalized on Median Voting Power") +
coord_flip() +
theme_fivethirtyeight() +
scale_fill_manual(values=c("#d6c000","#56A2D8","#C6563D"),
guide = guide_legend(reverse = T)) +
theme(legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.size =  unit(0.15, "in"),
panel.grid.major.y = element_blank(),
plot.background = element_blank(),
panel.background = element_blank(),
legend.background = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.text.y = element_text(color=state_winner$Winner)) +
ggtitle('\nProportion of Vote by Party by State\n') +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10),
position = 'bottom') +
labs(fill='Party:')
ECDeviation %>%
select(-c(Votes, `Party Category`)) %>%
distinct() %>%
ggplot(aes(x=State, y=Deviation, label=round(Deviation,1))) +
geom_segment(aes(y = 0,
x = State,
yend = Deviation,
xend = State),
color=state_winner$Winner) +
geom_point(stat='identity', color=state_winner$Winner, size=6)  +
geom_text(color="white", size=2) +
labs(title="US Electoral College Voting Power",
subtitle="Normalized on Median Voting Power") +
coord_flip() +
theme_fivethirtyeight() +
scale_fill_manual(values=c("#d6c000","#56A2D8","#C6563D"),
guide = guide_legend(reverse = T)) +
theme(legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.size =  unit(0.15, "in"),
panel.grid.major.y = element_blank(),
plot.background = element_blank(),
panel.background = element_blank(),
legend.background = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.text.y = element_text(color=state_winner$Winner)) +
ggtitle('\nProportion of Vote by Party by State\n') +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10),
position = 'bottom') +
labs(fill='Party:')
ECDeviation %>%
select(-c(Votes, `Party Category`)) %>%
distinct() %>%
# Following documentation here for the lollypop chart
# http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html
ggplot(aes(x=State, y=Deviation, label=round(Deviation,1))) +
geom_segment(aes(y = 0, x = State, yend = Deviation,
xend = State), color='black') +
geom_point(stat='identity', color='black', size=6)  +
geom_text(color="white", size=2) +
labs(title="US Electoral College Voting Power",
subtitle="Normalized on Median Voting Power, Deviation from Median EC Vote per 1,000,000 People") +
coord_flip() +
theme_fivethirtyeight() +
scale_fill_manual(values=c("#d6c000","#56A2D8","#C6563D"),
guide = guide_legend(reverse = T)) +
theme(legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.size =  unit(0.15, "in"),
panel.grid.major.y = element_blank(),
plot.background = element_blank(),
panel.background = element_blank(),
legend.background = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.text.y = element_text(color=state_winner$Winner)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10),
position = 'bottom')
test = r'\n'
test = r"\n"
test = r'\n'
test = r'hello'
foo1 <- function(x, n) {
diffs <- x[-1] - x[1:(length(x) - 1)]
mean(diffs > n)
}
foo1(c(1,2,3,4))
foo1(c(1,2,3,4), 3)
x = c(1,2,3,4)
x[-1]
xx[1:(length(x) - 1)]
x[1:(length(x) - 1)]
x[-1]
x[1:(length(x) - 1)]
x[-1] - x[1:(length(x) - 1)]
foo1(c(1,2,3,4), 1)
foo1(c(1,2,3,4), 0)
foo1(c(1,2,3,4), 0)
diffs
mean(diffs > n)
foo1 <- function(x, n) {
diffs <- x[-1] - x[1:(length(x) - 1)]
diffs
mean(diffs > n)
}
foo1(c(1,2,3,4), 0)
print(diffs)
mean(diffs > n)
foo1 <- function(x, n) {
diffs <- x[-1] - x[1:(length(x) - 1)]
print(diffs)
mean(diffs > n)
}
foo1(c(1,2,3,4), 0)
print(diffs >n)
mean(diffs > n)
foo1 <- function(x, n) {
diffs <- x[-1] - x[1:(length(x) - 1)]
print(diffs)
print(diffs >n)
mean(diffs > n)
}
foo1(c(1,2,3,4), 0)
foo1(c(1,4,3,4), 1)
diffs <- x[-1] - x[1:(length(x) - 1)]
mean(diffs > n)
foo1 <- function(x, n) {
diffs <- x[-1] - x[1:(length(x) - 1)]
mean(diffs > n)
}
foo1(c(1,4,3,4), 1)
foo2 <- function(p) {
p / (1 - p)
}
foo2(c(1,4,3,4), 1)
foo2(c(1,4,3,4))
4/3
2/3
1/1-1
1/1-1
4/1-4
4/1-4
4/1
foo2(c(1,1,1,1))
foo2(c(2,1,1,1))
foo2(c(2,2,2,2))
foo2(c(2,3,2,2))
print((1-p))
p / (1 - p)
foo2 <- function(p) {
print((1-p))
p / (1 - p)
}
foo2(c(2,3,2,2))
birthday = ymd(19960210)
library(lubridate)
birthday = ymd(19960210)
birthday
def birthday = function(){print(foo)}
birthday = mdy(02101996)
birthday
birthday = mdy("2/10/1996")
birthday
if(date == birthday){return "Happy Birthday"};
birthday = function(date){
if(date == birthday){return "Happy Birthday"};
if(date == birthday){return("Happy Birthday")};
checkBirthday = function(date){
if(date == birthday){return("Happy Birthday")};
};
checkBirthday(ymd_hms("2019-04-25 5:13:02 CDT"))
checkBirthday(ymd_hms("2019-04-25 5:13:02 CDT"))
else{return('Have a Nice Day')};
return('Have a Nice Day');
checkBirthday = function(date){
if(date == birthday){return("Happy Birthday")};
return('Have a Nice Day');
};
checkBirthday(ymd_hms("2019-04-25 5:13:02 CDT"))
checkBirthday(Sys.time())
checkBirthday(ymd_hms("2019-04-25 5:13:02 CDT"))
checkBirthday(Sys.time())
day = date.day()
day = month(date)
day = month(mdy("2/10/1996"))
day
day = day(mdy("2/10/1996"))
day
if(md == halfbirthday){return('Happy Half Birthday')};
return('Have a Nice Day');
checkBirthday = function(date){
md = format(date, format="%m/%d")
if(md == birthday){return('Happy Birthday')};
if(md == halfbirthday){return('Happy Half Birthday')};
return('Have a Nice Day');
};
checkBirthday(ymd_hms("2019-04-25 5:13:02 CDT"))
checkBirthday(ymd_hms("2019-04-25 5:13:02 CDT"))
checkBirthday(ymd_hms("2019-04-25 5:13:02 CDT"))
checkBirthday(ymd_hms_tz("2019-04-25 5:13:02 CDT"))
checkBirthday(ymd_hms_tz("2019-04-25 5:13:02"))
checkBirthday(ymd_hms("2019-04-25 5:13:02"))
testdate = parse_date_time("2019-04-25 5:13:02 CDT")
testdate = parse_date_time("2019-04-25 5:13:02 CDT", orders = c('ymd', 'hms'))
testdate = parse_date_time("2019-04-25 5:13:02 CDT", orders = c('ymd', 'HMS'))
testdate = parse_date_time("2019-04-25 5:13:02 CDT", orders = c('y-m-d', 'HMS'))
testdate = parse_date_time("2019-04-25 5:13:02 CDT", orders = c('y-m-d', 'H:M:S'))
testdate = strftime("2019-04-25 5:13:02 CDT", format = "%Y-%M-%D %H:%M:%S")
testdate
testdate = strftime("2019-04-25 5:13:02 CDT", format = "%Y-%M-%D %H:%M:%S")
testdate
checkBirthday(Sys.time())
checkBirthday(Sys.time())
md = format(date, format="%m/%d")
if(md == birthday){return('Happy Birthday')};
md
as.str(md)
str(md)
md = format(date, format="%m/%d")
str(md)
testdate = strftime("2019-04-25 5:13:02 CDT", format = "%Y-%m-%d %H:%M:%S")
testdate
checkBirthday(testdate)
birthday = "2/10"
halfbirthday "8/10"
checkBirthday = function(date){
md = format(date, format="%m/%d")
md
if(md == birthday){return('Happy Birthday')};
if(md == halfbirthday){return('Happy Half Birthday')};
return('Have a Nice Day');
};
halfbirthday =  "8/10"
checkBirthday = function(date){
md = format(date, format="%m/%d")
md
if(md == birthday){return('Happy Birthday')};
if(md == halfbirthday){return('Happy Half Birthday')};
return('Have a Nice Day');
};
testdate = strftime("2019-04-25 5:13:02 CDT", format = "%Y-%m-%d %H:%M:%S")
testdate
checkBirthday(testdate)
checkBirthday(Sys.time())
halfbirthday = strftime("2019-08-10 5:13:02 CDT", format = "%Y-%m-%d %H:%M:%S")
checkBirthday(halfbirthday)
checkBirthday(Sys.time())
birthday = strftime("2019-02-10 5:13:02 CDT", format = "%Y-%m-%d %H:%M:%S")
checkBirthday(testdate)
checkBirthday(halfbirthday)
checkBirthday(birthday)
greetings(birthday)
greetings = function(datetime){
print(hour(datetime))
# if hourdatetime
}
greetings(birthday)
birthday = strftime("2019-02-10 5:13:02 CDT", format = "%Y-%m-%d %H:%M:%S")
birthday = strftime("2019-02-10 20:13:02 CDT", format = "%Y-%m-%d %H:%M:%S")
greetings(birthday)
return('Good Evening')
return('Good Evening');
greetings = function(datetime){
print(hour(datetime))
if(hour(datetime) < 10){return('Good Morning')};
if(hour(datetime) < 14){return('Good Afternoon')};
return('Good Evening');
}
birthday = strftime("2019-02-10 20:13:02 CDT", format = "%Y-%m-%d %H:%M:%S")
greetings(morning)
morning = strftime("2019-02-10 20:13:02 CDT", format = "%Y-%m-%d %H:%M:%S")
greetings(morning)
now = Sys.time()
greetings(morning)
greetings(afternoon)
greetings(evening)
greetings(now)
greetings(afternoon)
m
m
m
morning = strftime("2019-02-10 9:13:02 CDT", format = "%Y-%m-%d %H:%M:%S")
afternoon = strftime("2019-02-10 11:13:02 CDT", format = "%Y-%m-%d %H:%M:%S")
evening = strftime("2019-02-10 20:13:02 CDT", format = "%Y-%m-%d %H:%M:%S")
now = Sys.time()
greetings(morning)
greetings(afternoon)
greetings(evening)
greetings(now)
rsconnect::setAccountInfo(name='ryanzimmerman', token='28A86A9C5C8B63B69C3EB5FC5C4C065E', secret='7OK5TSLZh5qNbh29yr7SADHcMBw2hOULUPBRE0vw')
instally.packages('rsconnect')
install.packages('rsconnect')
library(rsconnect)
rsconnect::deployApp('Chicago/')
library(rsconnect)
rsconnect::deployApp('./app.R')
shiny::runApp('Documents/Olaf/Final Semester/Data Science/Basketball/Shiny App/Basketball')
